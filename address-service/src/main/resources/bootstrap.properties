spring.application.name=address-service

#since config-server is registered with eureka, we need to look for it 
spring.cloud.config.discovery.enabled=true
#provide the applicatin name of config server
spring.cloud.config.discovery.service-id=config-server

#Define which application.properties profile we want to fetch (in our example our oprofile is dev)
spring.cloud.config.profile=dev

#Add the following to permit refreshing the properties values in case of changing its values
management.endpoints.web.exposure.include=refresh

#If we aren't using eureka then we need to provide the url of the config server
#spring.cloud.config.uri=http://localhost:8888

#################################################################
# 																#
# We read all the following commented properties from LocalRepo #
#																#
#################################################################

#spring.datasource.url=jdbc:mysql://localhost:/faculty?serverTimezone=UTC#
#spring.datasource.username=root
#spring.datasource.password=A1l2i319810423

##Hibernate Properties
#Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.hibernate.ddl-auto=update

#The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5Dialect

#spring.jpa.show-sql = true
#logging.level.org.hibernate.SQL=DEBUG

#server.port=8181

#eurka server url that this microservice need to register it self in eureka server
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka

#zipkin server
#spring.zipkin.base-url=http://localhost:9411


#If you face error like "java.net.UnknownHostException: failed to resolve...."
# then add the folloring property to student and address microservices
#eureka.instance.hostname=localhost